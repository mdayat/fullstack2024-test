// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMyClient = `-- name: DeleteMyClient :execrows
UPDATE my_client SET deleted_at = $2 WHERE id = $1
`

type DeleteMyClientParams struct {
	ID        int32            `json:"id"`
	DeletedAt pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) DeleteMyClient(ctx context.Context, arg DeleteMyClientParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMyClient, arg.ID, arg.DeletedAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertMyClient = `-- name: InsertMyClient :one
INSERT INTO my_client (name, slug, is_project, self_capture, client_prefix, client_logo, address, phone_number, city, created_at, updated_at, deleted_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id, name, slug, is_project, self_capture, client_prefix, client_logo, address, phone_number, city, created_at, updated_at, deleted_at
`

type InsertMyClientParams struct {
	Name         string           `json:"name"`
	Slug         string           `json:"slug"`
	IsProject    string           `json:"is_project"`
	SelfCapture  string           `json:"self_capture"`
	ClientPrefix string           `json:"client_prefix"`
	ClientLogo   string           `json:"client_logo"`
	Address      pgtype.Text      `json:"address"`
	PhoneNumber  pgtype.Text      `json:"phone_number"`
	City         pgtype.Text      `json:"city"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	DeletedAt    pgtype.Timestamp `json:"deleted_at"`
}

func (q *Queries) InsertMyClient(ctx context.Context, arg InsertMyClientParams) (MyClient, error) {
	row := q.db.QueryRow(ctx, insertMyClient,
		arg.Name,
		arg.Slug,
		arg.IsProject,
		arg.SelfCapture,
		arg.ClientPrefix,
		arg.ClientLogo,
		arg.Address,
		arg.PhoneNumber,
		arg.City,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i MyClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.IsProject,
		&i.SelfCapture,
		&i.ClientPrefix,
		&i.ClientLogo,
		&i.Address,
		&i.PhoneNumber,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const selectMyClientById = `-- name: SelectMyClientById :one
SELECT id, name, slug, is_project, self_capture, client_prefix, client_logo, address, phone_number, city, created_at, updated_at, deleted_at FROM my_client WHERE id = $1
`

func (q *Queries) SelectMyClientById(ctx context.Context, id int32) (MyClient, error) {
	row := q.db.QueryRow(ctx, selectMyClientById, id)
	var i MyClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.IsProject,
		&i.SelfCapture,
		&i.ClientPrefix,
		&i.ClientLogo,
		&i.Address,
		&i.PhoneNumber,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateMyClient = `-- name: UpdateMyClient :one
UPDATE my_client
SET
  name = $1,
  slug = $2,
  is_project = $3,
  self_capture = $4,
  client_prefix = $5,
  client_logo = $6,
  address = $7,
  phone_number = $8,
  city = $9,
  updated_at = $10,
  created_at = COALESCE($11, created_at)
WHERE id = $1 RETURNING id, name, slug, is_project, self_capture, client_prefix, client_logo, address, phone_number, city, created_at, updated_at, deleted_at
`

type UpdateMyClientParams struct {
	Name         string           `json:"name"`
	Slug         string           `json:"slug"`
	IsProject    string           `json:"is_project"`
	SelfCapture  string           `json:"self_capture"`
	ClientPrefix string           `json:"client_prefix"`
	ClientLogo   string           `json:"client_logo"`
	Address      pgtype.Text      `json:"address"`
	PhoneNumber  pgtype.Text      `json:"phone_number"`
	City         pgtype.Text      `json:"city"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) UpdateMyClient(ctx context.Context, arg UpdateMyClientParams) (MyClient, error) {
	row := q.db.QueryRow(ctx, updateMyClient,
		arg.Name,
		arg.Slug,
		arg.IsProject,
		arg.SelfCapture,
		arg.ClientPrefix,
		arg.ClientLogo,
		arg.Address,
		arg.PhoneNumber,
		arg.City,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i MyClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.IsProject,
		&i.SelfCapture,
		&i.ClientPrefix,
		&i.ClientLogo,
		&i.Address,
		&i.PhoneNumber,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
